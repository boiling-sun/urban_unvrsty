"""
Во вторую вставку нужно было написать те пары чисел друг за другом, 
чтобы число из первой вставки было кратно(делилось без остатка) сумме их значений.

Пример 1:
9 - число из первой вставки
1218273645 - нужный пароль (1 и 2, 1 и 8, 2 и 7, 3 и 6, 4 и 5 - пары; число 9 кратно сумме каждой пары)

Пример 2:
11 - число из первой вставки
11029384756 - нужный пароль (1 и 10, 2 и 9, 3 и 8, 4 и 7, 5 и 6 - пары; число 11 кратно сумме каждой пары)

Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20) 
программа выдавала нужный пароль result, для одного введённого числа.

Все пароли для чисел от 3 до 20 (для сверки):
3 - 12
4 - 13
5 - 1423
6 - 121524
7 - 162534
8 - 13172635
9 - 1218273645
10 - 141923283746
11 - 11029384756
12 - 12131511124210394857
13 - 112211310495867
14 - 1611325212343114105968
15 - 1214114232133124115106978
16 - 1317115262143531341251161079
17 - 11621531441351261171089
18 - 12151811724272163631545414513612711810
19 - 118217316415514613712811910
20 - 13141911923282183731746416515614713812911

Примечания:
Можно использовать как цикл for, так и цикл while
Первое число не входит в одно из чисел пары
Пары чисел подбираются от 1 до 20 для текущего числа.
"""


def main():
    while True:
        try: 
            number = int(input('Введите число от 3 до 20: ').strip())
            assert number in range(3, 21)
        except ValueError:
            print('Введено не число')
        except AssertionError:
            print('Число вне диапазона')
        else:
            print(f'Пароль: {get_combination(number)}')
            break

def get_combination(n):
    numbers = []
    for i in range(1, n + 1):
        for j in range(i + 1, 21):
            if n % sum((i, j)) == 0:
                numbers.append(str(i) + str(j))

    return ''.join(numbers)


if __name__ == '__main__':
    main()